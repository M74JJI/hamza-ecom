generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses    Address[]
  orders       Order[]
  Session      Session[]
  reviews      Review[]
  Cart         Cart?
  WishlistItem WishlistItem[]
}

model Address {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  fullName   String
  phone      String
  city       String
  fullAddress String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Order      Order[]
}


model Category {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  parentId         String?
  parent           Category?         @relation("CategoryToCategory", fields: [parentId], references: [id])
  children         Category[]        @relation("CategoryToCategory")
  products         ProductCategory[]
  imageUrl         String?
  isActiveInHeader Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
}

model Product {
  id           String             @id @default(cuid())
  slug         String             @unique
  status       String             @default("DRAFT") // DRAFT|PUBLISHED
  isFeaturedInHero Boolean @default(false)
  brand     String
  rating   Float @default(0)
  details      ProductDetail[]
  highlights   ProductHighlight[]
  variants     Variant[]
  categories   ProductCategory[]
  reviews      Review[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  WishlistItem WishlistItem[]
}

model ProductDetail {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  label     String
  value     String
}

model ProductHighlight {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  label     String
  value     String
}

model Variant {
  id               String         @id @default(cuid())
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  title            String
  name             String
  color            String?
  variantStyleImg  String
  shortDescription String?
  contentHtml      String?
  sortOrder        Int            @default(0)
  isActive         Boolean        @default(true)
  freeDelivery     Boolean        @default(false)
  images           VariantImage[]
  sizes            VariantSize[]
  reviews          Review[]
  wishlist         WishlistItem[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model VariantImage {
  id        String   @id @default(cuid())
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String
  url       String
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([variantId, sortOrder])
}

model VariantSize {
  id              String  @id @default(cuid())
  variant         Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId       String
  size            String
  sku             String  @unique
  priceMAD        Float
  discountPercent Int?
  stockQty        Int
  isActive        Boolean @default(true)

  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Order {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  status               OrderStatus      @default(PENDING)
  totalMAD             Decimal          @db.Decimal(12, 2)
  currency             String           @default("MAD")
  shippingAddressId    String?
  shippingAddress      Address?         @relation(fields: [shippingAddressId], references: [id])
  shippingCompanyId    String?
  shippingCompany      DeliveryCompany? @relation(fields: [shippingCompanyId], references: [id])
  shippingFeeMAD       Decimal?         @db.Decimal(10, 2)
  couponCode           String?
  couponPercentApplied Int?
  subtotalMAD          Decimal?         @db.Decimal(12, 2)
  discountMAD          Decimal?         @db.Decimal(12, 2)
  createdAt            DateTime         @default(now())
  placedAt             DateTime?

 note                 String? 

  items  OrderItem[]
  coupon Coupon?     @relation(fields: [couponCode], references: [code])
}

model OrderItem {
  id                 String      @id @default(cuid())
  order              Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String
  variantSize        VariantSize @relation(fields: [variantSizeId], references: [id])
  variantSizeId      String
  titleSnapshot      String
  skuSnapshot        String
  attributesSnapshot Json
  quantity           Int
  unitPriceMAD       Decimal     @db.Decimal(10, 2)
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([productId, categoryId])
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String // email
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String // email
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id            String      @id @default(cuid())
  cartId        String
  cart          Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantSizeId String
  variantSize   VariantSize @relation(fields: [variantSizeId], references: [id])
  quantity      Int         @default(1)
  unitPriceMAD  Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model DeliveryCompany {
  id        String   @id @default(cuid())
  name      String
  priceMAD  Decimal  @db.Decimal(10, 2)
  avgDays   Int // average delivery time in days
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Coupon {
  id        String    @id @default(cuid())
  code      String    @unique
  percent   Int
  active    Boolean   @default(true)
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
}

model Review {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  rating          Int
  comment         String
  chosenVariant   Variant? @relation(fields: [chosenVariantId], references: [id], onDelete: SetNull)
  chosenVariantId String?
  chosenSize      String?
  quantity        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([productId, rating, createdAt])
  @@index([userId, productId])
}

model WishlistItem {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId  String

  createdAt  DateTime @default(now())

  @@id([userId, productId, variantId])
}
